---
title: "R Project"
subtitle: "Repaso de Lenguaje de Programación"
---



## ¿Qué es R Project?

R es un lenguaje programación multiparadigma (procedural, imperativo, orientado a objetos y [funcional](https://es.wikipedia.org/wiki/Programación_funcional)) enfocado a aplicaciones estadísticas. Por estadísticas se debe entender también los campos de estudio que se basan o las utilizan como económía, finanzas, ciencia de datos, machine learning, etc.


### Ventajas de Utilizar R Project


**1. R es un software libre**

*	La libertad de ejecutar el programa como desee y con cualquier propósito
*	Estudiar el funcionamiento del programa y adaptarlo a sus necesidades.
*	Rescribir copias para ayudar a los demás.
*	Manejar el programa y publicar las mejorar, de manera que toda comunidad se beneficie.


**2. R es multiplataforma**

* R funciona en Mac, Windows y en numerosos sistemas UNIX. Esto significa que cualquier persona puede trabajar con tus datos, figuras, análisis y más importante aún usar tus instrucciones (también conocido como scripts o código) para generar las figuras y el análisis. Así que cualquier persona, y en cualquier lugar del mundo, con acceso a cualquier SO puede usar R sin ninguna licencia.


**3. R es de código abierto**

* Existe una gran comunidad de voluntarios trabajando para mejorarlo, lo cual permite ser moldeado y dirigido a cuestiones específicas. Creando así programas y paquetes que funcionen en el entorno R. Programas tales como RStudio (actual Posit), Java GUI for R, R- commander, RKWard, entre otros, y con más de 18000 paquetes indexado en CRAN, Biocoductor, GitHub y R-Forge.



**4. Todo dentro de un mismo entorno** 

* R remplaza la combinación de varios programas para el proceso de análisis de datos, por ejemplo Excel, ArcGis, QGis, SigmaPlot, entre otros. Esto no solo resulta en el alto costo de las licencias de múltiples programas, si no también, en la gran cantidad de archivos con diferentes formatos que no podrían leer otros programas. En cambio con solo utilizar R, puedes realizar todo el análisis de datos e inclusive leer archivos de diferentes formatos.


### Desventajas de utilizar R 


* R tiene una vasta documentación de ayuda, descripción de paquetes y de funciones, que es difícil encontrar información específica en un momento dado.
* Los mensajes de error que R nos muestra, no es específica sobre los fallos que estamos realizando y solo un usuario con cierta experiencia en el uso de R puede saberlo.



## Instalación de R Project


### Instalación de R Project

Primero se debe instalar **[R Project](https://cran.r-project.org/bin/windows/base/)** desde su sitio oficial (https://cran.r-project.org/bin/windows/base/), se ejecuta el instalador que se descargó depende del sistema operativo del PC, como se muestra en las siguientes figuras:


![](images/install_r.png)

### Instalación de R para Windows

<center>![](images/install_r_w.gif){width=90%}</center>

### Instalar Rtools (solo Sistema Operativo Windows)

<center>![](images/w_rtools.png){width=60%}</center>

<center>![](images/install_rtools.png){width=60%}</center>


### Instalación de R para Mac

<center>![](images/install_r_mac.gif){width=90%}</center>


**R Project Ejecutándose**

![](images/r_project.png)



## Instalación de RStudio

Se recomienta instalar [Rstudio](https://www.rstudio.com/products/rstudio/download/), que es Interfaz de Usuario de R Project, desde su sitio web oficial, el cual permite acceder con mayor facilidad a sus funciones y potencialidades de R.


<center>![](images/instaladores_rstudio.png){width=60%}</center>



![](images/Install_RStudio.png)




![](images/rstudio.png)


<center>![](images/rstudio-editor.svg){width=90%}</center>


### RStudio Cloud


[RStudio Cloud](https://rstudio.cloud) es una versión ligera del IDE RStudio alojada en la la nube que permite a cualquiera hacer, compartir, enseñar y aprender Ciencias de Datos Online. Tiene una versión gratuita limitada.

#### Características:

* Analyze your data using the RStudio IDE, directly from your browser.
* Share projects with your team, class, workshop or the world.
* Teach data science with R to your students or colleagues.
* Learn data science in an instructor-led environment or with interactive tutorials.

<center>![](images/Rstudio_cloud_page.png){width=90%}</center>

<center>![](images/rstudio_logging.png){width=90%}</center>

<center>![](images/rstudio_workspace.png){width=90%}</center>

<center>![](images/rstudio_cloud.png){width=90%}</center>


## Instalar Librerías 


### Librerías en R

Las librerías o paquetes en R corresponden a una colección de funciones encapsuladas y diseñadas para atender una tarea específica. Por ejemplo, hay paquetes para trabajo visualización geoespacial, análisis psicométricos, mineria de datos, interacción con servicios de internet y muchas otras cosas más.


Estos paquetes se encuentran alojados principalmente en [CRAN](https://cran.r-project.org) (Comprehensive R Archive Network), así que pasan por un control riguroso antes de estar disponibles para su uso generalizado, al día de hoy (29.11.2021) existen 19580 paquetes disponibles. En el siguiente enlace se deja una lista de temas y sus librerías asociadas disponibles, con una breve descripción ([enlace](https://cran.r-project.org/web/views/))

Aunque las versiones de prueba de una librería pueden estar disponible en [Github](https://github.com) (Respositorio de Control de Versiones) de cada autor.


### Ejemplo de Instalación de Librerías desde R

Podemos instalar paquetes usando la función `install.packages()`, dando como argumento el nombre del paquete que deseamos instalar, entre comillas.

Para instalar librerías se puede hacer directamente desde la consola de RStudio, por ejemplo:

```{r eval=FALSE}
install.packages("dplyr") # Se puede instalar más de una librería a la vez
```


### Ejemplo de Instalación de Librerías desde Rstudio

También se pude instalar librerías del Panel "Packages"

<center>![](images/install_pack2.png){width=90%}</center>  


Y por último se puede instalar desde Pestaña "Tools" -> "Install Packages":

<center>![](images/install_pckages.gif){width=90%}</center>



## Definición de Directorios de Trabajos


Definir directorio de Trabajo con RStudio

<center>![](images/wdirectory.png){width=80%}</center>
<center>![](images/folder_directory.png){width=60%}</center>


Definir Directorio de Trabajo con una función

```{r eval=FALSE}
setwd("~/OneDrive - Universidad Adolfo Ibanez/FONDECYT/capacitacion_SPD")
```



Consultar Directorio de Trabajo

```{r}
getwd()
```



# Variables en R

## Tipos de Objetos en R

Los Datos en R se pueden clasificar por su dimensiones y los tipos de Datos que permiten almacenar, como se muestra en la siguiente tabla:

| Dimensiones | Homogéneos    | Heterogéneos |
|-------------|---------------|--------------|
| 1d          | Atomic vector | List         |
| 2d          | Matrix        | Data frame   |
| nd          | Array         |              |

Fuente: [http://adv-r.had.co.nz/Data-structures.html](http://adv-r.had.co.nz/Data-structures.html)



R nos permite definir variables que pueden ser luego usadas en las distintas operaciones. El lenguaje no solo permite definir escalares (variable de un numero), si no también variables que sean un conjunto de numero o caracteres ordenados.


### Variables Numéricas
```{r}
# La asignación en R son válidos 2 métodos '<-' o '='
x <- 7 # Definir variable (escalar) x que sea igual a 7
x # Mostrar que es x

y <- 3 + 2 * x # Crear y como funcion de x 
y
class(y)
```


Números Random con decimales

```{r}
ru <- runif(n = 100, min = 1, max = 10)
ru
```


```{r fig.width=8, fig.align='center'}
hist(ru, breaks = 20, col = "orange", border = "gray60", 
     main = "Histograma de valores Random")
```


Números Random Enteros

Simular los lanzamientos de un dado
```{r}
sample.int(n = 6, size = 10, replace = T)

```


### Variables de Caracter


```{r}
ch <- "Chile" # Definir variable (objeto) ch que sea la palabra "Chile"
sn <- "Santiago"
ch # Mostrar ch
sn
```


Unir variables de texto con  `paste()`

```{r}
ch <- "Chile" # Definir variable (objeto) ch que sea la palabra "Chile"
sn <- "Santiago"
union <- paste(sn,ch, sep = ", ")
union

```


Utilizar `paste0()`
```{r}
union <- paste("Provincia de ", sn,ch, sep = ", ")
union

union0 <- paste0("Provincia de ", sn, ", ", ch)
union0
```


Buscar y reemplazar con `gsub`

```{r}
av <- "Av. Apoquindo"
comuna <- "comuna de Las Condes"
calle <- paste(av, comuna, union0, sep = ", ")
calle
# reemplazar Av. por Avenida
calle_new <- gsub(pattern = "Av.", replacement = "Avenida", x = calle)
calle_new
```



## Estructuras de Datos

Las variables pueden ser un conjunto de números y caracteres ordenados de varias maneras. El orden que se les da depende de lo que queremos lograr con estos. 

* Vector
* Matrices
* Dataframes
* Factores
* Listas


### Vectores

**Vector** Cadenas unidimensionales (es decir una sola columna o fila) de un tipo único de valores (numéricos, caracteres, etc.)

```{r }
vec <-  c(4, 3, 1, 5, 8, 16)
vec
class(vec)
str(vec)
```


Podemos seleccionar parte del vector: 

```{r }
# EL primer índice en R es 1 (en otros lenguajes de programación es 0)
vec[3]

```

La selección también puede ser hecha con una condición, de tal manera que solo seleccione aquella parte del vector que cumple con la condición.

**Mayor a:**
```{r }
vec[vec >= 4]
```


**Contenido en:**
```{r }
vec[vec %in% c(3, 8, 7, 29)]
```

**Negación de la condición:**

```{r }
vec[!vec <= 3]
```
También podemos realizar operaciones matemáticas simples aplicadas al vector, por ejemplo una suma:
```{r }
vec2  <-  c(7, 10, 1)
vec + vec2
```


### Listas

Son estructuras eficientes y flexibles, que permiten combinar distintas clases de elementos : 
```{r }
lista <-  list(1, 2, 3, "cosa", x, y)
lista
str(lista)
```


```{r }
#Tambien se puede seleccionar parte de una lista, usando el doble corchete:
lista[[3]]

```

Como inspeccionar una lista con Rstudio
<center>![](images/rstudio_environment_list.gif){width=90%}</center>

### Matrices

Son estructuras de datos con 2 dimensiones, horizontal y la vertical (filas y columnas). Podemos construirlas usando la función "matrix", con un vector inicial y sus dimensiones:

```{r }
n <- matrix(c(1.3, 2.8, 3.5, 6.4, 5.3, 6.2, 7, 4.5, 2.4, 6.3, 5.6, 5.3, 6.6, 7, 4.3),
  nrow = 5, ncol = 3, byrow = TRUE)
n
```


La matriz tiene 2 dimensiones, por lo que para seleccionar partes de ella es necesario declarar dos dimensiones separadas por una coma. A la izquierda van las filas y a la derecha las columnas. Un valor vacío indica que se seleccionan todos los valores posibles.

```{r }
n[1,2]
```

```{r }
n[,3]
```

###  Dataframes

Estructura mas clásica de datos, es una matriz pero con mas atributos como nombres de columna y/o fila. Es lo mas similar en R a una tabla excel o la tabla de atributos. La manera mas simple de crear un dataframe es a partir de una matriz usando la función as.data.frame() :

```{r }
df<- as.data.frame(n)
df
```


Podemos asignar nombres a las columnas del dataframe
```{r }
names(df)<- c("control_1","control_2","examen")
df
```

Y a las filas del dataframe
```{r }
df$alumno <- c("Sofia","Tomas","Luciano","Julian","Gabriela")
df
```


También podemos realizar operaciones entre vectores del dataframe:
```{r }
df$promedio_final <-  0.3*df$control_1 + 0.3*df$control_2 + 0.4*df$examen
df
```
# Funciones en R

## Operaciones Básicas en R

### Operaciones Matemáticas
En R, es posible realizar operaciones matemáticas básicas utilizando los operadores aritméticos estándar. Estos operadores incluyen:

* Suma (+): se utiliza para sumar dos valores.
* Resta (-): se utiliza para restar un valor de otro.
* Multiplicación (*): se utiliza para multiplicar dos valores.
* División (/): se utiliza para dividir un valor por otro.
* Exponenciación (^): se utiliza para elevar un valor a una potencia.
* Módulo (%%): se utiliza para encontrar el resto de la división de un valor por otro.

Estos operadores se pueden utilizar con números enteros, decimales y variables numéricas. Además, también se pueden utilizar paréntesis para especificar el orden de las operaciones.

A continuación, se presentan algunos ejemplos de operaciones matemáticas básicas en R:

```{r}
# Suma
2 + 3 # resultado: 5

# Resta
5 - 2 # resultado: 3

# Multiplicación
2 * 4 # resultado: 8

# División
10 / 2 # resultado: 5

# Exponenciación
2^3 # resultado: 8

# Módulo
15 %% 4 # resultado: 3

# Utilizando paréntesis para especificar el orden de las operaciones
(2 + 3) * 4 # resultado: 20

```


Es importante tener en cuenta que R sigue las reglas de precedencia de las operaciones matemáticas. Esto significa que las operaciones dentro de los paréntesis se evalúan primero, seguidas de la exponenciación, la multiplicación y la división, y finalmente la suma y la resta. Si se requiere un orden específico de operaciones, se deben utilizar paréntesis para indicarlo.

Además, R también cuenta con una variedad de funciones matemáticas incorporadas, como "sin", "cos", "tan", "log", "exp", entre otras, que se pueden utilizar para realizar operaciones más complejas.



También se pueden aplica a un elemento a al objeto espacial completo

```{r}
a <- 13
b <- c(20,30,22,2,1)

sum(b) # suma
sqrt(b) # find the square root of x
```

```{r}
mean(b)
min(b)
max(b)


```


### Funciones Útiles de propósito general

```{r}
rep(1, 10)
rep("HAHA", 10)
seq(1, 10)
seq(1, 10, by = 2)
ifelse(3 > 5, 1, "this is false")
```


```{r}
paste("Hola", "amigo")
paste("Hello", "amigo", sep = "--")
paste0("Hello", "amigo")
tolower("HAHAHAHAH")
toupper("hueuehuehuheuhe")
```


## Operaciones Lógicas

En R, los operadores lógicos se utilizan para realizar comparaciones lógicas entre valores o expresiones. Estos operadores devuelven valores booleanos (TRUE o FALSE) según se cumpla o no la condición.

A continuación se presentan los operadores lógicos en R:

```{r echo=FALSE}
suppressPackageStartupMessages(library(kableExtra))
op_log <- data.frame(
  stringsAsFactors = FALSE,
  Operador = c("==", "!=", ">", "<", ">=", "<=", "&", "|", "!"),
  Significado = c(
    "Igual a",
    "Diferente a",
    "Mayor que",
    "Menor que",
    "Mayor o igual que",
    "Menor o igual que",
    "Operador lógico AND",
    "Operador lógico OR",
    "Operador lógico NOT"
  ),
  Ejemplo = c(
    "2 == 2 (TRUE)",
    "2 != 3 (TRUE)",
    "3 > 2 (TRUE)",
    "2 < 3 (TRUE)",
    "3 >= 2 (TRUE)",
    "2 <= 3 (TRUE)",
    "2 < 3 & 3 > 1 (TRUE)",
    "2 < 3 | 3 < 1 (TRUE)",
    "!(2 == 3) (TRUE)"
  )
)

op_log %>% 
  kbl() %>%
   kable_styling(bootstrap_options = c("striped", "hover", "condensed"), font_size = 16)
```


### Operador de igualdad: (==)

Este operador se utiliza para comparar si dos valores son iguales. Retorna TRUE si la condición se cumple y FALSE en caso contrario.

```{r}
a <- 2
b <- 3
a == b # FALSE
```

### Operador de desigualdad: (!=)

Este operador se utiliza para comparar si dos valores son diferentes. Retorna TRUE si la condición se cumple y FALSE en caso contrario.

```{r}
a <- 2
b <- 3
a != b # TRUE
```


### Operador de mayor que: (>)
Este operador se utiliza para comparar si un valor es mayor que otro. Retorna TRUE si la condición se cumple y FALSE en caso contrario.

```{r}
a <- 2
b <- 3
b > a # TRUE
```


### Operador de menor que: (<)
Este operador se utiliza para comparar si un valor es menor que otro. Retorna TRUE si la condición se cumple y FALSE en caso contrario.

```{r}
a <- 2
b <- 3
a < b # TRUE
```


### Operador de mayor o igual que: (>=)
Este operador se utiliza para comparar si un valor es mayor o igual que otro. Retorna TRUE si la condición se cumple y FALSE en caso contrario.

```{r}
a <- 2
b <- 3
b >= a # TRUE
```


### Operador de menor o igual que: (<=)
Este operador se utiliza para comparar si un valor es menor o igual que otro. Retorna TRUE si la condición se cumple y FALSE en caso contrario.

```{r}
a <- 2
b <- 3
a <= b # TRUE
```


### Operador lógico AND: (&)
Este operador se utiliza para evaluar dos o más condiciones y retornar TRUE si todas se cumplen, de lo contrario retorna FALSE.

```{r}
a <- 2
b <- 3
c <- 4
a < b & b < c # TRUE

```


### Operador lógico OR: (|)
Este operador se utiliza para evaluar dos o más condiciones y retornar TRUE si al menos una se cumple, de lo contrario retorna FALSE.

```{r}
a <- 2
b <- 3
c <- 4
a > b | b < c # TRUE
```

Operador lógico NOT: (!)
Este operador se utiliza para negar una condición. Si la condición es TRUE, retorna FALSE, y si la condición es FALSE, retorna TRUE.


```{r}
a <- 2
b <- 3
!(a == b) # TRUE
```

Es importante tener en cuenta que los operadores lógicos se pueden utilizar en combinación para crear expresiones lógicas más complejas. Además, los operadores lógicos también se pueden utilizar en las estructuras de control condicionales, como if/else y switch, para tomar decisiones basadas en condiciones lógicas.


## Crear Funciones Propias

En R, es posible crear funciones propias para realizar tareas específicas y reutilizarlas en diferentes partes de un programa. Para crear una función en R, se utiliza la siguiente estructura:

```{r}
nombre_de_la_funcion <- function(argumentos) {
  cuerpo_de_la_funcion
}
```

Por ejemplo, se puede crear una función que calcule la suma de dos números:

```{r}
suma <- function(a, b) {
  resultado <- a + b
  return(resultado)
}

resultado_suma <- suma(2, 3)
print(resultado_suma) # 5
```

Por ejemplo, se puede crear una función que eleve al cuadrado:
```{r}


cuadrado <- function(x) { # x = parámetro
    y = x ^ 2 # asiganción de variables solo dentro de la función
    return(y) # especificar valor retornado (no necesario completamente)
}


a <- 13
b <- c(20,30,22,2,1)
cuadrado(a)
cuadrado(b)
```

Es importante tener en cuenta que los nombres de las funciones en R deben cumplir las mismas reglas que los nombres de las variables. Además, es recomendable incluir comentarios explicativos dentro del cuerpo de la función para facilitar su comprensión y uso posterior.




**Actividad:**

Actividad: Crear una función que calcule la hipotenusa de un triángulo rectángulo (Teorema de Pitágoras):

<center>![](images/hipotenusa.png){width=40%}</center>


Establece que el cuadrado de la longitud de la hipotenusa es igual a la suma de los cuadrados de las longitudes de los catetos.

$$c^2 = {a^2}+{b^2}$$

Por lo cual:

$$c = \sqrt{{a^2}+{b^2}}$$


::: {.callout-tip appearance="simple"}

## Ayuda  
```{r eval=F}
hipotenusa <- function(a, b){
  #h <-     # En esta parte escribir la función
  return(h)
}
r1 <-  hipotenusa(a = 5,  b = 5)

```

:::


Encontrar la Hipotenusa  de:   
  h=*?*, a = 10, b = 6  
  h=*?*, a = 5, b = 4  
  h=*?*, a = 3, b = 4  





# Estructura de Control en R

Las estructuras de control en R son herramientas que permiten controlar el flujo de ejecución de un programa. Las estructuras de control son esenciales para cualquier lenguaje de programación, ya que permiten que el programa tome decisiones y realice acciones en función de ciertas condiciones.


Estas estructuras de control son muy útiles para crear programas que respondan a diferentes situaciones y condiciones, y permiten que los programadores puedan crear soluciones más eficientes y complejas.

En R, existen tres estructuras de control principales:

1. Estructuras condicionales: Permiten ejecutar un bloque de código solo si se cumple una condición determinada. Las estructuras condicionales más comunes en R son "`if`" y "`ifelse`".

2. Estructuras de bucles: Permiten ejecutar un bloque de código repetidamente, mientras se cumpla una condición determinada. Las estructuras de bucles más comunes en R son "`while`", "`for`" y "`repeat`".

3. Estructuras de control de flujo: Permiten cambiar el flujo de ejecución del programa en función de ciertas condiciones. Las estructuras de control de flujo más comunes en R son "`break`" y "`next`".

## Estructuras condicionales


Las estructuras condicionales son una de las tres estructuras de control principales en R. Estas estructuras permiten ejecutar un bloque de código solo si se cumple una condición determinada.

La estructura condicional más común en R es "`if`". La sintaxis básica de la estructura "`if`" es la siguiente:

```{r eval=FALSE}
if(Condición) {
  operaciones_si_la_condición_es_TRUE
}
```

La "condición" es una expresión lógica que evalúa a verdadero o falso. Si la condición es verdadera, el bloque de código dentro del "if" se ejecutará. Si la condición es falsa, el bloque de código dentro del "if" se ignorará.


Por ejemplo, le pedimos a R que nos muestre el texto "Verdadero" si la condición se cumple.

```{r}
# Se cumple la condición y se muestra "verdadero"
if(4 > 3) {
  "Verdadero"
}
```

```{r}
# No se cumple la condición y no pasa nada
if(4 > 5) {
  "Verdadero"
}
```


También se puede agregar un bloque de código opcional para el caso en que la condición sea falsa utilizando la estructura "`else`". La sintaxis básica de la estructura "`if`" con "`else`" es la siguie

*SI esta condición es es cierta, ENTONCES* haz estas operaciones, DE OTRO MODO haz estas otras operaciones.

```{r eval=FALSE}
if(condición) {
  operaciones_si_la_condición_es_TRUE
} else {
  operaciones_si_la_condición_es_FALSE
}
```


Usando los ejemplos anteriores, podemos mostrar "Falso" si no se cumple la condición, en lugar de que no ocurra nada

```{r}
# Se cumple la condición y se muestra "Verdadero"
if(4 > 3) {
  "Verdadero"
} else {
  "Falso"
}
```



La estructura "`ifelse`" es otra forma de estructura condicional que permite ejecutar diferentes bloques de código en función de la condición. La sintaxis básica de la estructura "`ifelse`" es la siguiente:


```{r eval=FALSE}
ifelse(condición, expresión1, expresión2)
```

Si la "condición" es verdadera, se ejecutará "expresión1". Si la "condición" es falsa, se ejecutará "expresión2".

Además, se pueden anidar varias estructuras condicionales utilizando la sintaxis de "if" y "else". Por ejemplo:


```{r eval=FALSE}
if (condición1) {
  # Código a ejecutar si la condición1 es verdadera
} else if (condición2) {
  # Código a ejecutar si la condición1 es falsa y la condición2 es verdadera
} else {
  # Código a ejecutar si todas las condiciones son falsas
}
```

En resumen, las estructuras condicionales en R son herramientas muy útiles para controlar el flujo de ejecución de un programa en función de ciertas condiciones. Estas estructuras permiten crear soluciones más eficientes y complejas al permitir que los programas tomen decisiones y realicen acciones en función de las condiciones que se presenten.

## Estructuras de bucles


Las estructuras de bucles son una de las tres estructuras de control principales en R. Estas estructuras permiten ejecutar un bloque de código repetidamente mientras se cumpla una condición determinada. En R, existen tres estructuras de bucles principales: "`while`", "`for`" y "`repeat`".


**Beneficios**

* Es más fácil ver el objetivo de tu código; lo diferente llama más atención a la vista que aquello que permanece igual.
* Es más sencillo responder a cambios en los requerimientos. A medida que tus necesidades cambian, solo necesitarás realizar cambios en un lugar, en vez de recordar cambiar en cada lugar donde copiaste y pegaste el código.
* Es probable que tengas menos errores porque cada línea de código es utilizada en más lugares.



### Estructura de bucle "`for`":

La estructura "for" permite repetir la ejecución de un bloque de código un número determinado de veces. La sintaxis básica de la estructura "for" es la siguiente:

```{r eval=FALSE}
for (variable in secuencia) {
  # Código a ejecutar para cada elemento en la secuencia
}
```

La "secuencia" es un objeto que contiene una serie de elementos. La "variable" toma el valor de cada elemento de la secuencia en cada iteración del bucle. En cada iteración, se ejecutará el bloque de código dentro del "for" para ese valor de la variable.

Ejemplo simple: `print` una secuencia


```{r}
for (i in 1:5){
  print(i)
}

```




Ejemplo 2: Guardando los resultados en un vector

```{r}
dado <- 1:6
mi_vector <- NULL
for(cara in dado) {
  mi_vector[cara] <- cara ^ 2
}
mi_vector
```


Ejemplo 3: Loops con vectores

```{r}
alumnos <- c("Carmen", "Adriana", "Marco", "Fabi", "Brenda")

for(i in 1:length(alumnos)) {
  print(paste("Hola,", alumnos[i], sep = " "))
}
```


Ejemplo 4: loops en Dataframes

```{r}
df <- data.frame(a = rnorm(10), b = rnorm(10),
                 c = rnorm(10), d = rnorm(10))

for(i in 1:ncol(df)){
  promedio = mean(df[,i])
  print(promedio)
}
```



### Estructura de bucle "while":

La estructura "`while`" permite repetir la ejecución de un bloque de código mientras se cumpla una condición determinada. La sintaxis básica de la estructura "`while`" es la siguiente:

```{r eval=FALSE}
while (condición) {
  # Código a ejecutar mientras se cumpla la condición
}

```

La "condición" es una expresión lógica que evalúa a verdadero o falso. Si la condición es verdadera, se ejecutará el bloque de código dentro del "while". Este proceso se repetirá hasta que la condición sea falsa.


### Estructura de bucle "repeat":

```{r eval=FALSE}
repeat {
  # Código a ejecutar de manera indefinida
  if (condición) {
    break
  }
}
```
El bloque de código dentro del "`repeat`" se ejecutará de manera indefinida hasta que se encuentre la sentencia "`break`", que permite salir del bucle. La "condición" es una expresión lógica que evalúa a verdadero o falso. Si la condición es verdadera, se ejecutará la sentencia "break" y se saldrá del bucle.


## Estructuras de control de flujo

"`next`" y "`break`" son palabras clave importantes en R que se utilizan en las estructuras de control de flujo, específicamente en las estructuras de bucle. "next" se utiliza para saltar a la siguiente iteración del bucle sin ejecutar el resto del código dentro del bucle, mientras que "break" se utiliza para detener el bucle de forma abrupta, incluso si la condición del bucle todavía se cumple.

###  Estructuras de control "next":

"`next`" se utiliza en una estructura de bucle para saltar a la siguiente iteración del bucle sin ejecutar el resto del código dentro del bucle. Es decir, si se encuentra la palabra clave "next" dentro de un bucle, se omitirá el código que viene después y el bucle pasará inmediatamente a la siguiente iteración. La palabra clave "next" es útil cuando se desea saltar una iteración específica del bucle, sin afectar el resto del código.

Por ejemplo, en el siguiente código se utiliza la palabra clave "next" para omitir la impresión del número 3 dentro del bucle "for":

```{r}
for (i in 1:5) {
  if (i == 3) {
    next
  }
  print(i)
}
```
###  Estructuras de control "break":

"break", por otro lado, se utiliza en una estructura de bucle para detener el bucle de forma abrupta, incluso si la condición del bucle todavía se cumple. Es decir, si se encuentra la palabra clave "break" dentro de un bucle, se detendrá el bucle de inmediato y se continuará con la ejecución del código que viene después del bucle. La palabra clave "break" es útil cuando se desea detener el bucle en un punto específico sin tener que esperar a que la condición del bucle se deje de cumplir.

Por ejemplo, en el siguiente código se utiliza la palabra clave "break" para detener el bucle "while" cuando el valor de "i" es mayor que 5:

```{r}
i <- 1
while (i < 10) {
  if (i > 5) {
    break
  }
  print(i)
  i <- i + 1
}
```

# Tidyverse en R

## Introducción a Tidyverse

[Tidyverse](https://www.tidyverse.org) es una colección de paquetes diseñados para Ciencia de Datos.

![](images/tidyverse.png){fig-aling="center" width="300"}

```{r eval=FALSE}
# instalación
install.packages("tidyverse")
```

Todos los paquetes comparten una filosofía de diseño, una gramática y estructuras de datos.

*Esta filosofía promueve*

-   En Pipes, navegarás dentro del pipe, `%>%`, para anidar instrucciones
-   Si bien copiar-y-pegar (copy-and-paste) es una herramienta poderosa, deberías evitar utilizarla más de dos veces. Repetir el código es peligroso porque puede llevar a errores e inconsistencias.
-   A medida que comiences a escribir funciones más potentes, necesitarás una base sólida acerca de las estructuras de datos.
-   Las funciones nos permiten evitar la repetición de código; sin embargo, muchas veces necesitas repertir las mismas acciones con diferentes inputs. Puedes hacer esto con herramientas de iteración.


## Estructura de un dataframe

<center>![](images/tidy_frame.svg){width="80%"}</center>

**Lectura de Base de SII**


```{r}
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(sf))
tbl_sii  <- readRDS("data/sii/mz_constru_SII.rds") %>% 
  st_drop_geometry() # descartar geometrias solo usar la tabla de datos

head(tbl_sii)
```


## Funciones básicas `dplyr`

<center>![](images/dplyr_variables.png){width="70%"}</center>

### Select

`select` Seleccionar variables relevantes

```{r}
# seleccionar nomnres de columnas que deseo conservar
tbl_sii %>%
  select(n_com, oficinas, comercio, vivienda)

# seleccionar nomnres de columnas que deseo eliminar anteponiendo un "-"
tbl_sii %>%
  select(-cod_com)
```

### Filter

```{r}
mi_comuna <- "LAS CONDES" 

sii_com <- tbl_sii %>%
  filter(n_com == mi_comuna) 
 
head(sii_com, 5)
```



`filter`: Operadores Lógicos

```{r echo = FALSE}
op_logicos <- tibble::tribble(
    ~Operador,                   ~Comparación,       ~Ejemplo, ~Resultado,
      "x | y",           "x Ó y es verdadero", "TRUE | FALSE",     "TRUE",
      "x & y",         "x Y y son verdaderos", "TRUE & FALSE",    "FALSE",
         "!x", "x no es verdadero (negación)",        "!TRUE",    "FALSE",
  "isTRUE(x)",  "x es verdadero (afirmación)", "isTRUE(TRUE)",     "TRUE"
  )

require(knitr)
kable(op_logicos, digits = 3, row.names = FALSE, align = "c",
              caption = NULL)

```


Filtrar las manzanas que tengan valores de oficina y comercio mayores a 0

```{r eval=TRUE}
sii_com %>%
  filter(oficinas > 0 & comercio > 0) 

```




## Resúmenes Estadísticos con `dplyr`

<center>![](images/dplyr_group_by.png){width="70%"}</center>

Contabilizar cuantos metros cuadrados de oficina por cada comuna.

```{r}
tbl_resumen <-  tbl_sii %>%
  group_by(n_com) %>%
  summarise(Cantidad_mz = n(),
            Total_of = sum(oficinas)) %>%
  arrange(desc(Total_of)) # Ordenar

tbl_resumen
```

**Actividad**

-   Contabilizar cuantos metros cuadrados de Comercio hay por cada comuna
rdenar de mayor a menor.
-   Crear tabla con las 10 comunas que tienen mayor densisdad de Comercio

::: {.callout-tip appearance="simple"}
## Densidad de comercio

Se puede entender como la división de la cantidad de metros cuadrados de comercio dividio por el total de metros cuadrados.
:::


## Visualización de Variables

### Función Plot

```{r}
options(scipen = 999) # evitas notación cientiífica
hist(sii_com$vivienda, breaks = 50,
     main = "Histograma mt2 de Viviendas", col = "#225ea8")
# colores:https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3
```



### Package [ggplot2](https://ggplot2.tidyverse.org)

```{r  fig.align='center', fig.height=3.5}
library(ggplot2)
ggplot(sii_com, aes(x = vivienda)) + 
  geom_histogram(bins = 50, fill = "#225ea8", color ="black")

```

[ggplot2](https://ggplot2.tidyverse.org) con estilos y características

```{r  fig.align='center', fig.height=3.5}

ggplot(sii_com, aes(x = vivienda)) +
  geom_histogram(bins = 50, color = "#c7e9b4", fill = "#1d91c0")+
  theme_bw()+
  labs(title="Histograma mt2 de Viviendas", x ="Mt2. Viviendas", y = "Frecuencias")+
  theme(plot.title = element_text(face = "bold",colour= "gray60", size=10)) 
```


# Objetos Espaciales en R

## Introducción

Un rasgo es una cosa, un objeto del mundo real, como un edificio o un árbol. Al igual que los objetos, suelen estar formados por otros objetos. Lo mismo ocurre con los rasgos: un conjunto de rasgos puede formar un único rasgo. Una masa forestal puede ser un rasgo, un bosque puede ser un rasgo, una ciudad puede ser un rasgo. Un píxel de una imagen de satélite puede ser un rasgo, una imagen completa también puede ser un rasgo.

Los elementos tienen una geometría que describe su ubicación en la Tierra y atributos que describen otras propiedades. La geometría de un árbol puede ser la delineación de su copa, de su tallo o el punto que indica su centro. Otras propiedades pueden ser su altura, color, diámetro a la altura del pecho en una fecha determinada, etc.




## Lectura de Insumos Espaciales

```{r}
# install.packages("sf")
library(sf)
crs_ll <- "+proj=longlat +datum=WGS84 +no_defs"
crs_utm <- "+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"
censo <-  readRDS("data/censo/zonas_urb_consolidadas.rds")

```

## Transformar a objeto sf (simple features)

```{r}
# transformar a objeto sf (simple features)
censo_sf <- st_as_sf(censo)
# head(censo_sf)
names(censo_sf)
```

## Filtros espaciales por data

```{r}
library(dplyr)
mi_communa <-  "LAS CONDES"

zonas_com <-  censo_sf %>% 
  filter(NOM_COMUNA == mi_communa)

zonas_com %>% head()
```

## Visualización Cartográficas

### Visualización estática Simple

```{r fig.width=12, fig.align='center', fig.height=6}
## Visualizar
# Consideración el plot se realiza sobre la columna geometry

nombre_plot <-  paste0("COMUNA DE ", mi_communa)
plot(zonas_com$geometry, main = nombre_plot,col ="orange")

```

### Visualización estática con `ggplot2`

```{r eval=TRUE, fig.width=12, fig.align='center'}
library(ggplot2)

# Visualización ggplot y sf
ggplot() +
  geom_sf(data = zonas_com, fill = "orange", alpha=0.5)+
  ggtitle(nombre_plot) +
  theme_bw() +
  theme(legend.position="none")+
  theme(panel.grid.major = element_line(colour = "gray80"),
        panel.grid.minor = element_line(colour = "gray80"))
```

### Visualización Dinámica con `mapview`

```{r fig.align="center", echo=TRUE, fig.width=12, fig.height=6,eval=FALSE}
# install.packages("mapview")
library(mapview)
m <- mapview(zonas_com, alpha = 0.5,
        col.regions = "orange", color="gray80",
        legend =FALSE, cex = 3)
m 
```

![](images/mapa_mapview.png){fig-aling=center}



## Referencias:

- [R para Ciencia de Datos](https://es.r4ds.hadley.nz)
- [RStudio para Estadística Descriptiva en Ciencias Sociales](https://bookdown.org/gboccardo/manual-ED-UCH/)
- <https://bookdown.org/jboscomendoza/r-principiantes4/estructuras-de-control.html>
- <https://rstudio-pubs-static.s3.amazonaws.com/623888_497a5388a98545c48e9b5b6bec4056f6.html>
- [Paletas de colores](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3)
- [https://bookdown.org/jboscomendoza/r-principiantes4/estructuras-de-control.html](https://bookdown.org/jboscomendoza/r-principiantes4/estructuras-de-control.html)
- [https://es.r4ds.hadley.nz/iteración.html](https://es.r4ds.hadley.nz/iteración.html)
- [https://rstudio-pubs-static.s3.amazonaws.com/623888_497a5388a98545c48e9b5b6bec4056f6.html](https://rstudio-pubs-static.s3.amazonaws.com/623888_497a5388a98545c48e9b5b6bec4056f6.html)
- [Simple Features for R](https://r-spatial.github.io/sf/articles/sf1.html)
